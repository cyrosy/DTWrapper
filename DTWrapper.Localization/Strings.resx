<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutMenu" xml:space="preserve">
    <value>?</value>
  </data>
  <data name="AddProgram" xml:space="preserve">
    <value>Add a program</value>
  </data>
  <data name="AddToJumpList" xml:space="preserve">
    <value>Add to JumpList</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="Args" xml:space="preserve">
    <value>Arguments</value>
  </data>
  <data name="Basic" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CreateShortcut" xml:space="preserve">
    <value>Create a shortcut on Desktop</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="DiskImageFilter" xml:space="preserve">
    <value>Disk Images|*.iso; *.mdx; *.mds; *.mdf; *.ccd; *.cue; *.ape; *.flac; *.isz; *.cdi; *.b5t; *.b6t; *.bwt; *.nrg|All*.*</value>
  </data>
  <data name="DiskImageMounting" xml:space="preserve">
    <value>Mouting "{0}" disk image for "{1}" ...</value>
  </data>
  <data name="DiskImagePath" xml:space="preserve">
    <value>Disk image path</value>
  </data>
  <data name="DiskImageUnmounting" xml:space="preserve">
    <value>Unmounting disk image ...</value>
  </data>
  <data name="DTNotFound" xml:space="preserve">
    <value>Daemon Tools not found</value>
  </data>
  <data name="DTSearching" xml:space="preserve">
    <value>Looking for Daemon Tools installation ...</value>
  </data>
  <data name="DTVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="DTWrapper" xml:space="preserve">
    <value>DTWrapper</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditProgram" xml:space="preserve">
    <value>Edit a program</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExecutableFilter" xml:space="preserve">
    <value>Executables|*.exe|All*.*</value>
  </data>
  <data name="ExecutablePath" xml:space="preserve">
    <value>Executable path</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="IconFilter" xml:space="preserve">
    <value>Icon files|*.ico; *.exe|All|*.*</value>
  </data>
  <data name="IconPath" xml:space="preserve">
    <value>Icon</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="InfoText" xml:space="preserve">
    <value>Informative text</value>
  </data>
  <data name="InvalidDrive" xml:space="preserve">
    <value>Invalid virtual drive</value>
  </data>
  <data name="InvalidExe" xml:space="preserve">
    <value>Invalid executable</value>
  </data>
  <data name="InvalidIcon" xml:space="preserve">
    <value>Invalid icon</value>
  </data>
  <data name="InvalidIso" xml:space="preserve">
    <value>Invalid disk image</value>
  </data>
  <data name="InvalidName" xml:space="preserve">
    <value>Invalid name</value>
  </data>
  <data name="LargeIcons" xml:space="preserve">
    <value>Large icons</value>
  </data>
  <data name="Licence" xml:space="preserve">
    <value>GPLv3</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="OptionsError" xml:space="preserve">
    <value>Error loading options</value>
  </data>
  <data name="Preparing" xml:space="preserve">
    <value>Preparing for launch ...</value>
  </data>
  <data name="ProgAskDelete" xml:space="preserve">
    <value>Do you really want to delete the program "{0}" ?</value>
  </data>
  <data name="ProgDelete" xml:space="preserve">
    <value>Delete a program</value>
  </data>
  <data name="ProgDeleted" xml:space="preserve">
    <value>Program "{0}" deleted</value>
  </data>
  <data name="ProgNotAdded" xml:space="preserve">
    <value>Program not added</value>
  </data>
  <data name="ProgNotDeleted" xml:space="preserve">
    <value>Program "{0}" not deleted</value>
  </data>
  <data name="ProgNotFound" xml:space="preserve">
    <value>Program "{0}" not found</value>
  </data>
  <data name="ProgNotModified" xml:space="preserve">
    <value>Program "{0}" not modified</value>
  </data>
  <data name="ProgPreparing" xml:space="preserve">
    <value>Preparing "{0}" to start ...</value>
  </data>
  <data name="ProgramName" xml:space="preserve">
    <value>DTWrapper</value>
  </data>
  <data name="ProgramVersion" xml:space="preserve">
    <value>v1.0.0</value>
  </data>
  <data name="ProgStarting" xml:space="preserve">
    <value>"{0}" is starting ...</value>
  </data>
  <data name="ProgWaitingEnd" xml:space="preserve">
    <value>Waiting for "{0}" to close</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SmallIcons" xml:space="preserve">
    <value>Small icons</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="VirtualDrive" xml:space="preserve">
    <value>Virtual drive</value>
  </data>
  <data name="VirtualDriveChoose" xml:space="preserve">
    <value>Choose a virtual drive</value>
  </data>
  <data name="VirtualDriveNoneFound" xml:space="preserve">
    <value>No virtual drive found. Add one via Daemon Tools and re-try.</value>
  </data>
  <data name="VirtualDriveSearching" xml:space="preserve">
    <value>Looking for virtual drives ...</value>
  </data>
  <data name="VirtualDriveSelected" xml:space="preserve">
    <value>Virtual drive {0} selected</value>
  </data>
  <data name="ErrorMounting" xml:space="preserve">
    <value>An error occured while mouting disk image</value>
  </data>
</root>